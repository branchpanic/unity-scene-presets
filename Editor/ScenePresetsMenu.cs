using System.CodeDom;
using System.CodeDom.Compiler;
using System.IO;
using System.Reflection;
using Microsoft.CSharp;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;

namespace ScenePresets.Editor
{
    public static class ScenePresetsMenu
    {
        public const string SettingsDir = "Assets/ScenePresets";
        public const string PresetLocation = SettingsDir + "/ScenePresets.asset";
        public const string ScriptLocation = SettingsDir + "/GeneratedScenePresetsMenu.cs";
        public const string RootMenuName = "Scene Presets";

        private static ScenePresetsSettings LoadSettings()
        {
            return AssetDatabase.LoadAssetAtPath<ScenePresetsSettings>(PresetLocation);
        }

        [MenuItem("Scene Presets/Save Current", priority = 0)]
        public static void SavePreset()
        {
            var setups = EditorSceneManager.GetSceneManagerSetup();

            Directory.CreateDirectory(SettingsDir);
            var presets = LoadSettings();
            if (presets == null)
            {
                presets = ScriptableObject.CreateInstance<ScenePresetsSettings>();
                AssetDatabase.CreateAsset(presets, PresetLocation);
            }

            presets.presets.Add(new ScenePresetsSettings.Preset {name = "New Preset", scenes = setups});

            AssetDatabase.SaveAssets();
            RebuildMenu();
        }

        private static CodeMemberMethod GenerateMenuItem(int index, ScenePresetsSettings.Preset preset,
            int priorityOffset = 100)
        {
            var method = new CodeMemberMethod
            {
                Name = "LoadSetting_" + index,

                // ReSharper disable once BitwiseOperatorOnEnumWithoutFlags
                Attributes = MemberAttributes.Private | MemberAttributes.Static
            };

            var menuItemDecl = new CodeAttributeDeclaration(
                nameof(MenuItem),
                new CodeAttributeArgument(new CodePrimitiveExpression(RootMenuName + "/" + preset.name)),
                new CodeAttributeArgument("priority", new CodePrimitiveExpression(index + priorityOffset))
            );

            method.CustomAttributes.Add(menuItemDecl);
            method.Statements.Add(
                new CodeMethodInvokeExpression(
                    new CodeTypeReferenceExpression(typeof(ScenePresetsMenu)),
                    nameof(LoadPreset),
                    new CodePrimitiveExpression(index)
                )
            );
            
            return method;
        }

        [MenuItem("Scene Presets/Rebuild Menu", priority = 1000)]
        public static void RebuildMenu()
        {
            var menuNs = new CodeNamespace("ScenePresets.Generated.Editor");
            var menuType = new CodeTypeDeclaration("GeneratedScenePresetsMenu")
            {
                TypeAttributes = TypeAttributes.Sealed
            };

            var genAttrDecl = new CodeAttributeDeclaration(
                nameof(GeneratedCodeAttribute),
                new CodeAttributeArgument(new CodePrimitiveExpression("ScenePresets")),
                new CodeAttributeArgument(new CodePrimitiveExpression("0.0.0"))
            );

            menuType.CustomAttributes.Add(genAttrDecl);

            var presets = LoadSettings();
            for (var i = 0; i < presets.presets.Count; i++)
            {
                menuType.Members.Add(GenerateMenuItem(i, presets.presets[i]));
            }

            menuNs.Types.Add(menuType);
            menuNs.Imports.AddRange(new[]
            {
                new CodeNamespaceImport("UnityEditor"),
                new CodeNamespaceImport("System.CodeDom.Compiler"),
            });
            menuNs.Comments.Add(new CodeCommentStatement("Generated by ScenePresets. Changes will be overwritten!"));

            using var sw = new StreamWriter(ScriptLocation);
            var provider = new CSharpCodeProvider();
            provider.GenerateCodeFromNamespace(menuNs, sw, new CodeGeneratorOptions());
            AssetDatabase.ImportAsset(ScriptLocation);
        }

        public static void LoadPreset(int index)
        {
            EditorSceneManager.RestoreSceneManagerSetup(LoadSettings().presets[index].scenes);
        }

        [MenuItem("Scene Presets/Edit in Inspector...", priority = 1001)]
        public static void EditPresets()
        {
            var presets = LoadSettings();
            Selection.activeObject = presets;
            EditorGUIUtility.PingObject(presets);
        }

        [MenuItem("Scene Presets/Rebuild Menu", validate = true)]
        [MenuItem("Scene Presets/Edit in Inspector...", validate = true)]
        public static bool ScenePresetsConfigExists()
        {
            return AssetDatabase.LoadAssetAtPath<ScenePresetsSettings>(PresetLocation) != null;
        }
    }
}